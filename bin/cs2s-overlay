#!/usr/bin/python3.11

from __future__ import annotations

import argparse
import contextlib
import os
import pwd
import shlex
import shutil
import subprocess
import tempfile
from collections.abc import Iterator
from pathlib import Path
from typing import Any, TextIO

STEAM_USER = STEAM_GROUP = "steam"
STEAM_PATH = Path("/home/steam")
OVERLAY_PATH = STEAM_PATH / ".overlay"
GAME_PATH = Path("/cs2")

# Always create this
OVERLAY_PATH.mkdir(exist_ok=True)
shutil.chown(OVERLAY_PATH, user=STEAM_USER, group=STEAM_GROUP)


def _create_directory(path: Path, exist_ok: bool = False) -> int:
    """Create and chown a new directory, error if it exists."""

    if not exist_ok and path.exists():
        print(f"Path {path} already exists!")

    try:
        path.mkdir(exist_ok=exist_ok)
    except OSError as error:
        print(f"Failed to create overlay path: {error}")
        return error.errno

    return 0


def _delete_directory(path: Path) -> int:
    """Delete a directory, return error code."""

    shutil.rmtree(path, ignore_errors=True)
    return 0


def _run(*args: str | Path, **kwargs: object) -> int:
    """Run a subprocess, print error if nonzero."""

    # Subprocess isn't working and I don't want to debug it
    command = shlex.join(map(str, args))
    print("Subprocess", " ".join(f"{key}={value}" for key, value in kwargs.items()) or "{}", command)
    return subprocess.run(args, **kwargs).returncode


@contextlib.contextmanager
def _replace_file(path: Path, **kwargs: Any) -> Iterator[tuple[TextIO, TextIO]]:
    """Atomically rewrite a file."""

    with tempfile.NamedTemporaryFile(**kwargs, mode="w", delete=False, dir=path.parent) as write:
        with path.open(**kwargs, mode="r") as read:
            yield read, write
        Path(write.name).replace(path)
        os.chmod(path, 0o755)


def add(name: str, replace: bool, addons: bool) -> int:
    """Add a new, writable overlay on top of the CS2 installation."""

    # Do this first to check for collisions
    overlay_path = STEAM_PATH / name
    print(f"Creating overlay {overlay_path}")
    if overlay_path.exists() and replace:
        print(f"Overlay {overlay_path} already exists, removing")
        remove(name)
    if status := _create_directory(overlay_path):
        return status

    overlay_data_path = OVERLAY_PATH / name
    print(f"Creating overlay data {overlay_data_path}")
    if status := _create_directory(overlay_data_path):
        _delete_directory(overlay_path)
        return status

    print(f"Creating mounting overlay data")
    if status := _run("mount", "-t", "tmpfs", "tmpfs", overlay_data_path):
        _delete_directory(overlay_data_path)
        _delete_directory(overlay_path)
        return status

    overlay_upper_path = overlay_data_path / "upper"
    print(f"Creating upper path {overlay_upper_path}")
    if status := _create_directory(overlay_upper_path):
        _run("umount", overlay_data_path)
        _delete_directory(overlay_data_path)
        _delete_directory(overlay_path)
        return status

    overlay_work_path = overlay_data_path / "work"
    print(f"Creating work path {overlay_work_path}")
    if status := _create_directory(overlay_work_path):
        _run("umount", overlay_data_path)
        _delete_directory(overlay_data_path)
        _delete_directory(overlay_path)
        return status

    overlay_mount_options = (
        f'lowerdir={GAME_PATH},'
        f'upperdir={overlay_upper_path},'
        f'workdir={overlay_work_path}'
    )
    print(f"Mounting the overlay")
    if status := _run("mount", "-t", "overlay", "overlay", "-o", overlay_mount_options, overlay_path):
        _run("umount", overlay_data_path)
        _delete_directory(overlay_data_path)
        _delete_directory(overlay_path)
        return status

    if addons:
        addons_path = overlay_path / "game" / "csgo" / "addons"
        print(f"Creating {addons_path}")
        addons_path.mkdir(exist_ok=True)
        gameinfo_path = overlay_path / "game" / "csgo" / "gameinfo.gi"
        print(f"Updating {gameinfo_path} to include metamod")
        try:
            with _replace_file(gameinfo_path) as (read, write):
                for line in read:
                    if line.strip().split() == ["Game", "csgo"]:
                        print("\t\t\tGame\tcsgo/addons/metamod", file=write)
                    write.write(line)
        except OSError as error:
            print(f"Failed to link addons, ignoring: {error}")


def install(name: str, prefix: Path, paths: list[Path]) -> int:
    """Copy a series of paths into an overlay, globbing directories."""

    overlay_path = STEAM_PATH / name
    install_path = overlay_path / prefix
    print(f"Installing {len(paths)} items into {install_path}")

    def _map_paths() -> Iterator[tuple[Path, Path]]:
        for path in paths:
            if path.is_dir():
                for subpath in path.rglob("*"):
                    yield subpath, install_path / Path(*subpath.parts[1:])
            else:
                yield path, install_path / path

    for from_path, to_path in _map_paths():
        if from_path.is_dir():
            to_path.mkdir(exist_ok=True, parents=True)
        else:
            shutil.copy(from_path, to_path)
            print(f"Installed {to_path}")
        shutil.chown(to_path, user=STEAM_USER, group=STEAM_GROUP)


def start(name: str, rest: list[str | Path]) -> int:
    """Start the dedicated server out of an overlay."""

    start_path = STEAM_PATH / name / "game" / "bin" / "linuxsteamrt64" / "cs2"
    if not start_path.is_file():
        print(f"Cannot find {start_path}")
        return -1

    # Permanently set our user ID to steam and hand off to the server process
    steam_uid = pwd.getpwnam("steam").pw_uid
    os.setresuid(steam_uid, steam_uid, steam_uid)
    # Reset $HOME so dynamic libraries are loaded properly; reset a couple other variables while we're here
    # https://man7.org/linux/man-pages/man7/environ.7.html
    os.environ["LOGNAME"] = STEAM_USER
    os.environ["HOME"] = os.environ["PWD"] = str(STEAM_PATH)
    os.execl(start_path, "-dedicated", *rest)


def remove(name: str) -> int:
    """Unmount and remove an overlay."""

    overlay_path = STEAM_PATH / name
    print(f"Unmounting overlay {overlay_path}")
    status = _run("umount", overlay_path)
    print(f"Deleting overlay {overlay_path}")
    status |= _delete_directory(overlay_path)

    overlay_data_path = OVERLAY_PATH / name
    print(f"Unmounting overlay data {overlay_data_path}")
    status |= _run("umount", overlay_data_path)
    print(f"Deleting overlay data {overlay_data_path}")
    status |= _delete_directory(overlay_data_path)

    return status


def main() -> int:
    """Manage overlays of the installed server."""

    parser = argparse.ArgumentParser(description=main.__doc__)
    commands = parser.add_subparsers(dest="command")
    add_parser = commands.add_parser("add", help=add.__doc__)
    add_parser.add_argument("name", help="A name to assign the overlay.")
    add_parser.add_argument("-r", "--replace", action="store_true", help="Replace an existing overlay.")
    add_parser.add_argument("-a", "--addons", action="store_true", help="Create and link an addons directory.")
    install_parser = commands.add_parser("install", help=install.__doc__)
    install_parser.add_argument("name", help="The name of the overlay to install files into.")
    install_parser.add_argument(
        "-p",
        "--prefix",
        default=Path("game/csgo"),
        type=Path,
        help="A subpath to install files into.",
    )
    install_parser.add_argument(
        "paths",
        nargs="*",
        type=Path,
        default=[Path("package")],
        help="A series of paths to copy.",
    )
    start_parser = commands.add_parser("start", help=start.__doc__)
    start_parser.add_argument("name", help="The name of the overlay to start.")
    start_parser.add_argument("rest", nargs=argparse.REMAINDER, help="Forward args to server start.")
    remove_parser = commands.add_parser("remove", help=remove.__doc__)
    remove_parser.add_argument("name", help="The name of the overlay to remove.")

    args = parser.parse_args()
    if args.command == "add":
        return add(args.name, replace=args.replace, addons=args.addons)
    elif args.command == "install":
        return install(args.name, prefix=args.prefix, paths=args.paths)
    elif args.command == "start":
        return start(args.name, args.rest)
    elif args.command == "remove":
        return remove(args.name)

    return 1


if __name__ == "__main__":
    exit(main())
